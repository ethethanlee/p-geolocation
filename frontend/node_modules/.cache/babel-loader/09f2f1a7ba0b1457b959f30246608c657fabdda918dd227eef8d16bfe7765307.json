{"ast":null,"code":"var _jsxFileName = \"/Users/ethanlee/Developer/p-geolocation/frontend/src/pages/AboutPage.js\";\nimport React from 'react';\nimport Overlay from '../components/Overlay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AboutPage = () => {\n  const contentStyle = {\n    position: 'relative',\n    zIndex: 2,\n    color: 'white',\n    paddingTop: '20px'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      paddingLeft: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Overlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: contentStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"About p-geolocation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"One of the first lab courses I have taken at Pomona College entailed figuring out where in the world we are based on two pictures featuring the sun \\u2013 I thought the idea was pretty cool, eventually leading me to major in the topic, Astronomy. However, to take it a step further, this sort of tool could be used for one who lacks an internet connection to use a GPS to figure out where they are in the world. The main goal for this product is to be able to parse two images which feature the sun and then return the user\\u2019s location in some way. To break it down \\u2013 we would have some image parsing done through python\\u2019s cv2 library in order to determine the sun\\u2019s position relative to ourselves, then we could return what would be a general area or specific location on google maps. If we are to finish quickly, it would be good to get practice on important software engineering concepts such as unit testing, containerization, and much more. This project aims to help users who lack an internet connection \\u2013 those in empty desert areas, or those at sea. While this is not exactly a high impact project, it is a great exercise to learn more about image processing in an OOP fashion, while creating a product that interests students in topics such as astronomy. Moreover, the only real bias to this software would be that those with poor camera quality will make it more difficult to detect the whereabouts of the sun. However, we will likely use brightness thresholding to determine the location of the sun, which should combat poor image quality.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This project utilizes React JavaScript to create an interactive and dynamic user interface.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Feel free to explore and enjoy using p-geolocation!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n_c = AboutPage;\nexport { AboutPage };\nvar _c;\n$RefreshReg$(_c, \"AboutPage\");","map":{"version":3,"names":["React","Overlay","jsxDEV","_jsxDEV","AboutPage","contentStyle","position","zIndex","color","paddingTop","style","paddingLeft","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ethanlee/Developer/p-geolocation/frontend/src/pages/AboutPage.js"],"sourcesContent":["import React from 'react';\r\nimport Overlay from '../components/Overlay';\r\n\r\nconst AboutPage = () => {\r\n  const contentStyle = {\r\n    position: 'relative',\r\n    zIndex: 2,\r\n    color: 'white',\r\n    paddingTop: '20px', \r\n  };\r\n\r\n  return (\r\n    <div style={{ paddingLeft: '20px' }}>\r\n      < Overlay />\r\n      <div style={contentStyle}>\r\n        <h2>About p-geolocation</h2>\r\n        <p>\r\n        One of the first lab courses I have taken at Pomona College entailed figuring out where in the world we are based on two pictures featuring the sun – I thought the idea was pretty cool, eventually leading me to major in the topic, Astronomy. However, to take it a step further, this sort of tool could be used for one who lacks an internet connection to use a GPS to figure out where they are in the world. The main goal for this product is to be able to parse two images which feature the sun and then return the user’s location in some way. To break it down – we would have some image parsing done through python’s cv2 library in order to determine the sun’s position relative to ourselves, then we could return what would be a general area or specific location on google maps. If we are to finish quickly, it would be good to get practice on important software engineering concepts such as unit testing, containerization, and much more. \r\n\r\nThis project aims to help users who lack an internet connection – those in empty desert areas, or those at sea. While this is not exactly a high impact project, it is a great exercise to learn more about image processing in an OOP fashion, while creating a product that interests students in topics such as astronomy. Moreover, the only real bias to this software would be that those with poor camera quality will make it more difficult to detect the whereabouts of the sun. However, we will likely use brightness thresholding to determine the location of the sun, which should combat poor image quality.\r\n\r\n        </p>\r\n        <p>\r\n          This project utilizes React JavaScript to create an interactive and dynamic user interface.\r\n        </p>\r\n        <p>\r\n          Feel free to explore and enjoy using p-geolocation!\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { AboutPage };\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB,MAAMC,YAAY,GAAG;IACnBC,QAAQ,EAAE,UAAU;IACpBC,MAAM,EAAE,CAAC;IACTC,KAAK,EAAE,OAAO;IACdC,UAAU,EAAE;EACd,CAAC;EAED,oBACEN,OAAA;IAAKO,KAAK,EAAE;MAAEC,WAAW,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAClCT,OAAA,CAAEF,OAAO;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACZb,OAAA;MAAKO,KAAK,EAAEL,YAAa;MAAAO,QAAA,gBACvBT,OAAA;QAAAS,QAAA,EAAI;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5Bb,OAAA;QAAAS,QAAA,EAAG;MAKH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJb,OAAA;QAAAS,QAAA,EAAG;MAEH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJb,OAAA;QAAAS,QAAA,EAAG;MAEH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACC,EAAA,GA5BIb,SAAS;AA8Bf,SAASA,SAAS;AAAG,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}